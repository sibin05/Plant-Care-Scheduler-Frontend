{"ast":null,"code":"import axios from\"axios\";const API_URL=\"http://localhost:8080/api/auth\";// Spring Boot backend\n// Login\nexport const login=async _ref=>{let{username,password}=_ref;try{const response=await axios.post(\"\".concat(API_URL,\"/login\"),{username,password});const{accessToken,refreshToken,user}=response.data;// store tokens\nlocalStorage.setItem(\"accessToken\",accessToken);localStorage.setItem(\"refreshToken\",refreshToken);// optional: keep accessToken in sessionStorage too\nsessionStorage.setItem(\"accessToken\",accessToken);return{accessToken,refreshToken,user};}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||\"Login failed.\");}};// Register\nexport const register=async userData=>{try{const response=await axios.post(\"\".concat(API_URL,\"/register\"),userData,{headers:{'Content-Type':'application/json','Accept':'application/json'}});return response.data;}catch(error){var _error$response2,_error$response3,_error$response3$data,_error$response4,_error$response4$data;console.error('Registration error details:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||error.message||\"Registration failed.\";throw new Error(errorMessage);}};// Forgot Password\nexport const forgotPassword=async email=>{try{const response=await axios.post(\"\".concat(API_URL,\"/forgot-password?email=\").concat(email));return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||\"Failed to send reset link.\");}};// Logout\nexport const logout=()=>{localStorage.removeItem(\"accessToken\");localStorage.removeItem(\"refreshToken\");sessionStorage.removeItem(\"accessToken\");};","map":{"version":3,"names":["axios","API_URL","login","_ref","username","password","response","post","concat","accessToken","refreshToken","user","data","localStorage","setItem","sessionStorage","error","_error$response","_error$response$data","Error","message","register","userData","headers","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","errorMessage","forgotPassword","email","_error$response5","_error$response5$data","logout","removeItem"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/auth\"; // Spring Boot backend\r\n\r\n// Login\r\nexport const login = async ({ username, password }) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, { username, password });\r\n    const { accessToken, refreshToken, user } = response.data;\r\n\r\n    // store tokens\r\n    localStorage.setItem(\"accessToken\", accessToken);\r\n    localStorage.setItem(\"refreshToken\", refreshToken);\r\n\r\n    // optional: keep accessToken in sessionStorage too\r\n    sessionStorage.setItem(\"accessToken\", accessToken);\r\n\r\n    return { accessToken, refreshToken, user };\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || \"Login failed.\");\r\n  }\r\n};\r\n\r\n// Register\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error details:', error.response?.data);\r\n    const errorMessage = error.response?.data?.error || error.response?.data?.message || error.message || \"Registration failed.\";\r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Forgot Password\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/forgot-password?email=${email}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || \"Failed to send reset link.\");\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"accessToken\");\r\n  localStorage.removeItem(\"refreshToken\");\r\n  sessionStorage.removeItem(\"accessToken\");\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}