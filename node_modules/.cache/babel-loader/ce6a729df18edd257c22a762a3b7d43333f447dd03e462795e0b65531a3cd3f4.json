{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\project\\\\frontend\\\\Plant-Care-Scheduler-Frontend\\\\src\\\\components\\\\admin\\\\AdminLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { login } from '../../services/authService';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminLogin = () => {\n  _s();\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      var _response$user;\n      const response = await login(credentials);\n      // Check if user is admin\n      if (((_response$user = response.user) === null || _response$user === void 0 ? void 0 : _response$user.role) === 'ADMIN') {\n        navigate('/dashboard');\n      } else {\n        setError('Admin access required');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: credentials.username,\n        onChange: e => setCredentials({\n          ...credentials,\n          username: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: credentials.password,\n        onChange: e => setCredentials({\n          ...credentials,\n          password: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login as Admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminLogin, \"UrQ9GXxuDVPWyb1hZgiSTtdgAic=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminLogin;\nexport default AdminLogin;\nvar _c;\n$RefreshReg$(_c, \"AdminLogin\");","map":{"version":3,"names":["React","useState","login","useNavigate","jsxDEV","_jsxDEV","AdminLogin","_s","credentials","setCredentials","username","password","error","setError","navigate","handleSubmit","e","preventDefault","_response$user","response","user","role","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/src/components/admin/AdminLogin.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { login } from '../../services/authService';\nimport { useNavigate } from 'react-router-dom';\n\nconst AdminLogin = () => {\n  const [credentials, setCredentials] = useState({ username: '', password: '' });\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await login(credentials);\n      // Check if user is admin\n      if (response.user?.role === 'ADMIN') {\n        navigate('/dashboard');\n      } else {\n        setError('Admin access required');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"admin-login\">\n      <h2>Admin Login</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={credentials.username}\n          onChange={(e) => setCredentials({...credentials, username: e.target.value})}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={credentials.password}\n          onChange={(e) => setCredentials({...credentials, password: e.target.value})}\n          required\n        />\n        <button type=\"submit\">Login as Admin</button>\n      </form>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n};\n\nexport default AdminLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}