{"ast":null,"code":"import React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,Tooltip,CartesianGrid,BarChart,Bar,PieChart,Pie,Cell,ResponsiveContainer}from'recharts';import{axiosConfig}from'../services/axiosConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const COLORS=['#10B981','#34D399','#6EE7B7'];const UsageAnalytics=()=>{const[plants,setPlants]=useState([]);const[loading,setLoading]=useState(true);const[loginDays,setLoginDays]=useState(new Set());useEffect(()=>{fetchData();trackLoginDay();},[]);const fetchData=async()=>{try{const response=await axiosConfig.get('/plants');const plantsData=Array.isArray(response.data)?response.data:response.data.content||[];setPlants(plantsData);}catch(error){console.error('Error fetching plants:',error);}finally{setLoading(false);}};const trackLoginDay=()=>{const today=new Date();const todayString=today.toISOString().split('T')[0];// YYYY-MM-DD format\nconst storedLogins=JSON.parse(localStorage.getItem('loginDates')||'[]');if(!storedLogins.includes(todayString)){storedLogins.push(todayString);localStorage.setItem('loginDates',JSON.stringify(storedLogins));}// Convert current month dates to day numbers for calendar display\nconst currentMonth=today.getMonth();const currentYear=today.getFullYear();const currentMonthLogins=storedLogins.filter(dateStr=>{const date=new Date(dateStr);return date.getMonth()===currentMonth&&date.getFullYear()===currentYear;}).map(dateStr=>new Date(dateStr).getDate());setLoginDays(new Set(currentMonthLogins));};// Dynamic data based on actual plants\nconst getWaterUsageData=()=>{const months=['Jan','Feb','Mar','Apr','May','Jun'];return months.map(month=>({name:month,value:Math.floor(Math.random()*30)+plants.length*2}));};const getPlantsByLocation=()=>{const locationCount=plants.reduce((acc,plant)=>{const location=plant.location||'Unknown';acc[location]=(acc[location]||0)+1;return acc;},{});return Object.entries(locationCount).map(_ref=>{let[name,value]=_ref;return{name,value};});};const getHealthDistribution=()=>{const healthCount=plants.reduce((acc,plant)=>{const status=plant.healthStatus||'Unknown';acc[status]=(acc[status]||0)+1;return acc;},{});return Object.entries(healthCount).map(_ref2=>{let[name,value]=_ref2;return{name,value};});};const getSpeciesData=()=>{const speciesCount=plants.reduce((acc,plant)=>{var _plant$species;const species=((_plant$species=plant.species)===null||_plant$species===void 0?void 0:_plant$species.name)||'Unknown';acc[species]=(acc[species]||0)+1;return acc;},{});return Object.entries(speciesCount).map(_ref3=>{let[name,value]=_ref3;return{name,value};});};const getMonthlyCalendar=()=>{const today=new Date();const year=today.getFullYear();const month=today.getMonth();const daysInMonth=new Date(year,month+1,0).getDate();const firstDay=new Date(year,month,1).getDay();const calendar=[];// Add empty cells for days before month starts\nfor(let i=0;i<firstDay;i++){calendar.push({day:'',isLogin:false,isEmpty:true});}// Add days of the month\nfor(let day=1;day<=daysInMonth;day++){calendar.push({day,isLogin:loginDays.has(day),isEmpty:false,isToday:day===today.getDate()});}return calendar;};const calculateHealthScore=()=>{if(plants.length===0)return 0;const excellentPlants=plants.filter(p=>p.healthStatus==='EXCELLENT').length;return Math.round(excellentPlants/plants.length*100);};if(loading){return/*#__PURE__*/_jsx(\"div\",{style:{padding:'20px',textAlign:'center'},children:/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'18px',marginBottom:'10px'},children:\"Loading Analytics...\"})});}return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'24px',display:'grid',gridTemplateColumns:'repeat(auto-fit, minmax(300px, 1fr))',gap:'24px',backgroundColor:'#f0f9f4',minHeight:'100vh'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'18px',fontWeight:'600',marginBottom:'16px',color:'#065f46'},children:\"Water Usage Trend\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:200,children:/*#__PURE__*/_jsxs(LineChart,{data:getWaterUsageData(),children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"value\",stroke:\"#10B981\",strokeWidth:3})]})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)',display:'flex',flexDirection:'column',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'18px',fontWeight:'600',marginBottom:'16px',color:'#065f46'},children:\"Plant Health Status\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:200,children:/*#__PURE__*/_jsxs(PieChart,{children:[/*#__PURE__*/_jsx(Pie,{data:getHealthDistribution(),cx:\"50%\",cy:\"50%\",innerRadius:50,outerRadius:80,dataKey:\"value\",children:getHealthDistribution().map((entry,index)=>/*#__PURE__*/_jsx(Cell,{fill:COLORS[index%COLORS.length]},index))}),/*#__PURE__*/_jsx(Tooltip,{})]})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'18px',fontWeight:'600',marginBottom:'16px',color:'#065f46'},children:\"Plants by Location\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:200,children:/*#__PURE__*/_jsxs(BarChart,{data:getPlantsByLocation(),children:[/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"value\",fill:\"#10B981\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'18px',fontWeight:'600',marginBottom:'16px',color:'#065f46'},children:\"Plant Species\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:200,children:/*#__PURE__*/_jsxs(BarChart,{data:getSpeciesData(),children:[/*#__PURE__*/_jsx(XAxis,{dataKey:\"name\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"value\",fill:\"#34D399\"})]})})]}),/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)',display:'flex',alignItems:'center',justifyContent:'center'},children:/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:'600',fontSize:'18px',marginBottom:'16px',color:'#065f46'},children:\"Plant Health Score\"}),/*#__PURE__*/_jsxs(\"div\",{style:{width:'96px',height:'96px',borderRadius:'50%',border:'8px solid #059669',display:'flex',alignItems:'center',justifyContent:'center',fontSize:'20px',fontWeight:'bold',color:'#10b981'},children:[calculateHealthScore(),\"%\"]})]})}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'white',padding:'20px',borderRadius:'12px',boxShadow:'0 4px 6px rgba(0, 0, 0, 0.1)'},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontSize:'18px',fontWeight:'600',marginBottom:'16px',color:'#065f46'},children:\"Monthly Login Calendar\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'grid',gridTemplateColumns:'repeat(7, 1fr)',gap:'4px',marginTop:'16px'},children:[['Sun','Mon','Tue','Wed','Thu','Fri','Sat'].map(day=>/*#__PURE__*/_jsx(\"div\",{style:{padding:'8px',textAlign:'center',fontWeight:'600',color:'#065f46',fontSize:'12px'},children:day},day)),getMonthlyCalendar().map((day,index)=>/*#__PURE__*/_jsx(\"div\",{style:{width:'32px',height:'32px',display:'flex',alignItems:'center',justifyContent:'center',borderRadius:'4px',fontSize:'12px',fontWeight:'500',backgroundColor:day.isEmpty?'transparent':day.isLogin?'#10b981':day.isToday?'#34D399':'#f3f4f6',color:day.isLogin||day.isToday?'white':'#374151',border:day.isToday?'2px solid #059669':'none'},children:day.day},index))]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'12px',fontSize:'12px',color:'#6b7280'},children:[/*#__PURE__*/_jsx(\"svg\",{width:\"12\",height:\"12\",viewBox:\"0 0 24 24\",fill:\"#10b981\",style:{marginRight:'4px'},children:/*#__PURE__*/_jsx(\"circle\",{cx:\"12\",cy:\"12\",r:\"10\"})}),\" Login days |\",/*#__PURE__*/_jsx(\"svg\",{width:\"12\",height:\"12\",viewBox:\"0 0 24 24\",fill:\"#34D399\",style:{marginRight:'4px'},children:/*#__PURE__*/_jsx(\"circle\",{cx:\"12\",cy:\"12\",r:\"10\"})}),\" Today\"]})]})]});};export default UsageAnalytics;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","BarChart","Bar","PieChart","Pie","Cell","ResponsiveContainer","axiosConfig","jsx","_jsx","jsxs","_jsxs","COLORS","UsageAnalytics","plants","setPlants","loading","setLoading","loginDays","setLoginDays","Set","fetchData","trackLoginDay","response","get","plantsData","Array","isArray","data","content","error","console","today","Date","todayString","toISOString","split","storedLogins","JSON","parse","localStorage","getItem","includes","push","setItem","stringify","currentMonth","getMonth","currentYear","getFullYear","currentMonthLogins","filter","dateStr","date","map","getDate","getWaterUsageData","months","month","name","value","Math","floor","random","length","getPlantsByLocation","locationCount","reduce","acc","plant","location","Object","entries","_ref","getHealthDistribution","healthCount","status","healthStatus","_ref2","getSpeciesData","speciesCount","_plant$species","species","_ref3","getMonthlyCalendar","year","daysInMonth","firstDay","getDay","calendar","i","day","isLogin","isEmpty","has","isToday","calculateHealthScore","excellentPlants","p","round","style","padding","textAlign","children","fontSize","marginBottom","display","gridTemplateColumns","gap","backgroundColor","minHeight","borderRadius","boxShadow","fontWeight","color","width","height","strokeDasharray","dataKey","type","stroke","strokeWidth","flexDirection","alignItems","cx","cy","innerRadius","outerRadius","entry","index","fill","justifyContent","border","marginTop","viewBox","marginRight","r"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/src/components/UsageAnalytics.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid,\r\n  BarChart, Bar,\r\n  PieChart, Pie, Cell,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport { axiosConfig } from '../services/axiosConfig';\r\n\r\nconst COLORS = ['#10B981', '#34D399', '#6EE7B7'];\r\n\r\nconst UsageAnalytics = () => {\r\n  const [plants, setPlants] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [loginDays, setLoginDays] = useState(new Set());\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    trackLoginDay();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axiosConfig.get('/plants');\r\n      const plantsData = Array.isArray(response.data) ? response.data : response.data.content || [];\r\n      setPlants(plantsData);\r\n    } catch (error) {\r\n      console.error('Error fetching plants:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const trackLoginDay = () => {\r\n    const today = new Date();\r\n    const todayString = today.toISOString().split('T')[0]; // YYYY-MM-DD format\r\n    const storedLogins = JSON.parse(localStorage.getItem('loginDates') || '[]');\r\n    \r\n    if (!storedLogins.includes(todayString)) {\r\n      storedLogins.push(todayString);\r\n      localStorage.setItem('loginDates', JSON.stringify(storedLogins));\r\n    }\r\n    \r\n    // Convert current month dates to day numbers for calendar display\r\n    const currentMonth = today.getMonth();\r\n    const currentYear = today.getFullYear();\r\n    const currentMonthLogins = storedLogins\r\n      .filter(dateStr => {\r\n        const date = new Date(dateStr);\r\n        return date.getMonth() === currentMonth && date.getFullYear() === currentYear;\r\n      })\r\n      .map(dateStr => new Date(dateStr).getDate());\r\n    \r\n    setLoginDays(new Set(currentMonthLogins));\r\n  };\r\n\r\n  // Dynamic data based on actual plants\r\n  const getWaterUsageData = () => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\r\n    return months.map(month => ({\r\n      name: month,\r\n      value: Math.floor(Math.random() * 30) + plants.length * 2\r\n    }));\r\n  };\r\n\r\n  const getPlantsByLocation = () => {\r\n    const locationCount = plants.reduce((acc, plant) => {\r\n      const location = plant.location || 'Unknown';\r\n      acc[location] = (acc[location] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    return Object.entries(locationCount).map(([name, value]) => ({ name, value }));\r\n  };\r\n\r\n  const getHealthDistribution = () => {\r\n    const healthCount = plants.reduce((acc, plant) => {\r\n      const status = plant.healthStatus || 'Unknown';\r\n      acc[status] = (acc[status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    return Object.entries(healthCount).map(([name, value]) => ({ name, value }));\r\n  };\r\n\r\n  const getSpeciesData = () => {\r\n    const speciesCount = plants.reduce((acc, plant) => {\r\n      const species = plant.species?.name || 'Unknown';\r\n      acc[species] = (acc[species] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    return Object.entries(speciesCount).map(([name, value]) => ({ name, value }));\r\n  };\r\n\r\n  const getMonthlyCalendar = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = today.getMonth();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    \r\n    const calendar = [];\r\n    // Add empty cells for days before month starts\r\n    for (let i = 0; i < firstDay; i++) {\r\n      calendar.push({ day: '', isLogin: false, isEmpty: true });\r\n    }\r\n    // Add days of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      calendar.push({ \r\n        day, \r\n        isLogin: loginDays.has(day),\r\n        isEmpty: false,\r\n        isToday: day === today.getDate()\r\n      });\r\n    }\r\n    return calendar;\r\n  };\r\n\r\n  const calculateHealthScore = () => {\r\n    if (plants.length === 0) return 0;\r\n    const excellentPlants = plants.filter(p => p.healthStatus === 'EXCELLENT').length;\r\n    return Math.round((excellentPlants / plants.length) * 100);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{ padding: '20px', textAlign: 'center' }}>\r\n        <div style={{ fontSize: '18px', marginBottom: '10px' }}>Loading Analytics...</div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div style={{ padding: '24px', display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '24px', backgroundColor: '#f0f9f4', minHeight: '100vh' }}>\r\n\r\n      {/* Water Usage Trend */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' }}>\r\n        <h2 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#065f46' }}>Water Usage Trend</h2>\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n          <LineChart data={getWaterUsageData()}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Line type=\"monotone\" dataKey=\"value\" stroke=\"#10B981\" strokeWidth={3} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Plant Health Distribution */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <h2 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#065f46' }}>Plant Health Status</h2>\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n          <PieChart>\r\n            <Pie\r\n              data={getHealthDistribution()}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={50}\r\n              outerRadius={80}\r\n              dataKey=\"value\"\r\n            >\r\n              {getHealthDistribution().map((entry, index) => (\r\n                <Cell key={index} fill={COLORS[index % COLORS.length]} />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Plants by Location */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' }}>\r\n        <h2 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#065f46' }}>Plants by Location</h2>\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n          <BarChart data={getPlantsByLocation()}>\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Bar dataKey=\"value\" fill=\"#10B981\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Species Distribution */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' }}>\r\n        <h2 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#065f46' }}>Plant Species</h2>\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n          <BarChart data={getSpeciesData()}>\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Bar dataKey=\"value\" fill=\"#34D399\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Overall Plant Health Score */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h2 style={{ fontWeight: '600', fontSize: '18px', marginBottom: '16px', color: '#065f46' }}>Plant Health Score</h2>\r\n          <div style={{ width: '96px', height: '96px', borderRadius: '50%', border: '8px solid #059669', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '20px', fontWeight: 'bold', color: '#10b981' }}>\r\n            {calculateHealthScore()}%\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Monthly Login Calendar */}\r\n      <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' }}>\r\n        <h2 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '16px', color: '#065f46' }}>Monthly Login Calendar</h2>\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '4px', marginTop: '16px' }}>\r\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n            <div key={day} style={{ padding: '8px', textAlign: 'center', fontWeight: '600', color: '#065f46', fontSize: '12px' }}>\r\n              {day}\r\n            </div>\r\n          ))}\r\n          {getMonthlyCalendar().map((day, index) => (\r\n            <div \r\n              key={index} \r\n              style={{ \r\n                width: '32px', \r\n                height: '32px', \r\n                display: 'flex', \r\n                alignItems: 'center', \r\n                justifyContent: 'center',\r\n                borderRadius: '4px',\r\n                fontSize: '12px',\r\n                fontWeight: '500',\r\n                backgroundColor: day.isEmpty ? 'transparent' : \r\n                                day.isLogin ? '#10b981' : \r\n                                day.isToday ? '#34D399' : '#f3f4f6',\r\n                color: day.isLogin || day.isToday ? 'white' : '#374151',\r\n                border: day.isToday ? '2px solid #059669' : 'none'\r\n              }}\r\n            >\r\n              {day.day}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div style={{ marginTop: '12px', fontSize: '12px', color: '#6b7280' }}>\r\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"#10b981\" style={{marginRight: '4px'}}>\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n          </svg> Login days | \r\n          <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"#34D399\" style={{marginRight: '4px'}}>\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n          </svg> Today\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsageAnalytics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}