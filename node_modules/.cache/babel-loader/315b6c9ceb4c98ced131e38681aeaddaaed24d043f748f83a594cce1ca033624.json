{"ast":null,"code":"import { axiosConfig } from './axiosConfig';\nconst API_URL = 'http://localhost:8080/api/admin';\nexport const getAllUsers = async () => {\n  try {\n    const response = await axiosConfig.get(`${API_URL}/users`);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch users');\n  }\n};\nexport const createUser = async userData => {\n  try {\n    // Map frontend field names to backend field names\n    const backendUserData = {\n      username: userData.username,\n      email: userData.email,\n      passwordHash: userData.password,\n      // Backend expects passwordHash\n      role: userData.role,\n      gardeningExperience: userData.gardeningExperience,\n      location: userData.location,\n      timezone: userData.timezone\n    };\n    const response = await axiosConfig.post(`${API_URL}/users`, backendUserData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data, _error$response3;\n    let errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'Failed to create user';\n    if (typeof errorMessage === 'string') {\n      errorMessage = errorMessage.replace(/[{}\"]/g, '');\n    } else {\n      errorMessage = JSON.stringify(errorMessage).replace(/[{}\"]/g, '');\n    }\n    throw new Error(errorMessage);\n  }\n};\nexport const updateUser = async (userId, userData) => {\n  try {\n    const response = await axiosConfig.put(`${API_URL}/users/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update user');\n  }\n};\nexport const deleteUser = async userId => {\n  try {\n    const response = await axiosConfig.delete(`${API_URL}/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete user');\n  }\n};\nexport const getAdminStats = async () => {\n  try {\n    const response = await axiosConfig.get(`${API_URL}/stats`);\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch statistics');\n  }\n};","map":{"version":3,"names":["axiosConfig","API_URL","getAllUsers","response","get","data","error","_error$response","_error$response$data","Error","message","createUser","userData","backendUserData","username","email","passwordHash","password","role","gardeningExperience","location","timezone","post","headers","_error$response2","_error$response2$data","_error$response3","errorMessage","replace","JSON","stringify","updateUser","userId","put","_error$response4","_error$response4$data","deleteUser","delete","_error$response5","_error$response5$data","getAdminStats","_error$response6","_error$response6$data"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/src/services/userService.js"],"sourcesContent":["import { axiosConfig } from './axiosConfig';\n\nconst API_URL = 'http://localhost:8080/api/admin';\n\nexport const getAllUsers = async () => {\n  try {\n    const response = await axiosConfig.get(`${API_URL}/users`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to fetch users');\n  }\n};\n\nexport const createUser = async (userData) => {\n  try {\n    // Map frontend field names to backend field names\n    const backendUserData = {\n      username: userData.username,\n      email: userData.email,\n      passwordHash: userData.password, // Backend expects passwordHash\n      role: userData.role,\n      gardeningExperience: userData.gardeningExperience,\n      location: userData.location,\n      timezone: userData.timezone\n    };\n    const response = await axiosConfig.post(`${API_URL}/users`, backendUserData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    let errorMessage = error.response?.data?.message || error.response?.data || 'Failed to create user';\n    if (typeof errorMessage === 'string') {\n      errorMessage = errorMessage.replace(/[{}\"]/g, '');\n    } else {\n      errorMessage = JSON.stringify(errorMessage).replace(/[{}\"]/g, '');\n    }\n    throw new Error(errorMessage);\n  }\n};\n\nexport const updateUser = async (userId, userData) => {\n  try {\n    const response = await axiosConfig.put(`${API_URL}/users/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to update user');\n  }\n};\n\nexport const deleteUser = async (userId) => {\n  try {\n    const response = await axiosConfig.delete(`${API_URL}/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to delete user');\n  }\n};\n\nexport const getAdminStats = async () => {\n  try {\n    const response = await axiosConfig.get(`${API_URL}/stats`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to fetch statistics');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}