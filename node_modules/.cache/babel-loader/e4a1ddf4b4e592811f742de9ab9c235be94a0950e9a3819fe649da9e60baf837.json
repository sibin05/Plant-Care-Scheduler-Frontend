{"ast":null,"code":"import { isPercent } from '../util/DataUtils';\nexport var calculateChartDimensions = (containerWidth, containerHeight, props) => {\n  var {\n    width = '100%',\n    height = '100%',\n    aspect,\n    maxHeight\n  } = props;\n\n  /*\r\n   * The containerWidth and containerHeight are already percentage based because it's set as that percentage in CSS.\r\n   * Means we don't have to calculate percentages here.\r\n   */\n  var calculatedWidth = isPercent(width) ? containerWidth : Number(width);\n  var calculatedHeight = isPercent(height) ? containerHeight : Number(height);\n  if (aspect && aspect > 0) {\n    // Preserve the desired aspect ratio\n    if (calculatedWidth) {\n      // Will default to using width for aspect ratio\n      calculatedHeight = calculatedWidth / aspect;\n    } else if (calculatedHeight) {\n      // But we should also take height into consideration\n      calculatedWidth = calculatedHeight * aspect;\n    }\n\n    // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight\n    if (maxHeight && calculatedHeight > maxHeight) {\n      calculatedHeight = maxHeight;\n    }\n  }\n  return {\n    calculatedWidth,\n    calculatedHeight\n  };\n};\nvar bothOverflow = {\n  width: 0,\n  height: 0,\n  overflow: 'visible'\n};\nvar overflowX = {\n  width: 0,\n  overflowX: 'visible'\n};\nvar overflowY = {\n  height: 0,\n  overflowY: 'visible'\n};\nvar noStyle = {};\n\n/**\r\n * This zero-size, overflow-visible is required to allow the chart to shrink.\r\n * Without it, the chart itself will fill the ResponsiveContainer, and while it allows the chart to grow,\r\n * it would always keep the container at the size of the chart,\r\n * and ResizeObserver would never fire.\r\n * With this zero-size element, the chart itself never actually fills the container,\r\n * it just so happens that it is visible because it overflows.\r\n * I learned this trick from the `react-virtualized` library: https://github.com/bvaughn/react-virtualized-auto-sizer/blob/master/src/AutoSizer.ts\r\n * See https://github.com/recharts/recharts/issues/172 and also https://github.com/bvaughn/react-virtualized/issues/68\r\n *\r\n * Also, we don't need to apply the zero-size style if the dimension is a fixed number (or undefined),\r\n * because in that case the chart can't shrink in that dimension anyway.\r\n * This fixes defining the dimensions using aspect ratio: https://github.com/recharts/recharts/issues/6245\r\n */\nexport var getInnerDivStyle = props => {\n  var {\n    width,\n    height\n  } = props;\n  var isWidthPercent = isPercent(width);\n  var isHeightPercent = isPercent(height);\n  if (isWidthPercent && isHeightPercent) {\n    return bothOverflow;\n  }\n  if (isWidthPercent) {\n    return overflowX;\n  }\n  if (isHeightPercent) {\n    return overflowY;\n  }\n  return noStyle;\n};\nexport function getDefaultWidthAndHeight(_ref) {\n  var {\n    width,\n    height,\n    aspect\n  } = _ref;\n  var calculatedWidth = width;\n  var calculatedHeight = height;\n  if (calculatedWidth === undefined && calculatedHeight === undefined) {\n    calculatedWidth = '100%';\n    calculatedHeight = '100%';\n  } else if (calculatedWidth === undefined) {\n    calculatedWidth = aspect && aspect > 0 ? undefined : '100%';\n  } else if (calculatedHeight === undefined) {\n    calculatedHeight = aspect && aspect > 0 ? undefined : '100%';\n  }\n  return {\n    width: calculatedWidth,\n    height: calculatedHeight\n  };\n}","map":{"version":3,"names":["isPercent","calculateChartDimensions","containerWidth","containerHeight","props","width","height","aspect","maxHeight","calculatedWidth","Number","calculatedHeight","bothOverflow","overflow","overflowX","overflowY","noStyle","getInnerDivStyle","isWidthPercent","isHeightPercent","getDefaultWidthAndHeight","_ref","undefined"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/node_modules/recharts/es6/component/responsiveContainerUtils.js"],"sourcesContent":["import { isPercent } from '../util/DataUtils';\r\nexport var calculateChartDimensions = (containerWidth, containerHeight, props) => {\r\n  var {\r\n    width = '100%',\r\n    height = '100%',\r\n    aspect,\r\n    maxHeight\r\n  } = props;\r\n\r\n  /*\r\n   * The containerWidth and containerHeight are already percentage based because it's set as that percentage in CSS.\r\n   * Means we don't have to calculate percentages here.\r\n   */\r\n  var calculatedWidth = isPercent(width) ? containerWidth : Number(width);\r\n  var calculatedHeight = isPercent(height) ? containerHeight : Number(height);\r\n  if (aspect && aspect > 0) {\r\n    // Preserve the desired aspect ratio\r\n    if (calculatedWidth) {\r\n      // Will default to using width for aspect ratio\r\n      calculatedHeight = calculatedWidth / aspect;\r\n    } else if (calculatedHeight) {\r\n      // But we should also take height into consideration\r\n      calculatedWidth = calculatedHeight * aspect;\r\n    }\r\n\r\n    // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight\r\n    if (maxHeight && calculatedHeight > maxHeight) {\r\n      calculatedHeight = maxHeight;\r\n    }\r\n  }\r\n  return {\r\n    calculatedWidth,\r\n    calculatedHeight\r\n  };\r\n};\r\nvar bothOverflow = {\r\n  width: 0,\r\n  height: 0,\r\n  overflow: 'visible'\r\n};\r\nvar overflowX = {\r\n  width: 0,\r\n  overflowX: 'visible'\r\n};\r\nvar overflowY = {\r\n  height: 0,\r\n  overflowY: 'visible'\r\n};\r\nvar noStyle = {};\r\n\r\n/**\r\n * This zero-size, overflow-visible is required to allow the chart to shrink.\r\n * Without it, the chart itself will fill the ResponsiveContainer, and while it allows the chart to grow,\r\n * it would always keep the container at the size of the chart,\r\n * and ResizeObserver would never fire.\r\n * With this zero-size element, the chart itself never actually fills the container,\r\n * it just so happens that it is visible because it overflows.\r\n * I learned this trick from the `react-virtualized` library: https://github.com/bvaughn/react-virtualized-auto-sizer/blob/master/src/AutoSizer.ts\r\n * See https://github.com/recharts/recharts/issues/172 and also https://github.com/bvaughn/react-virtualized/issues/68\r\n *\r\n * Also, we don't need to apply the zero-size style if the dimension is a fixed number (or undefined),\r\n * because in that case the chart can't shrink in that dimension anyway.\r\n * This fixes defining the dimensions using aspect ratio: https://github.com/recharts/recharts/issues/6245\r\n */\r\nexport var getInnerDivStyle = props => {\r\n  var {\r\n    width,\r\n    height\r\n  } = props;\r\n  var isWidthPercent = isPercent(width);\r\n  var isHeightPercent = isPercent(height);\r\n  if (isWidthPercent && isHeightPercent) {\r\n    return bothOverflow;\r\n  }\r\n  if (isWidthPercent) {\r\n    return overflowX;\r\n  }\r\n  if (isHeightPercent) {\r\n    return overflowY;\r\n  }\r\n  return noStyle;\r\n};\r\nexport function getDefaultWidthAndHeight(_ref) {\r\n  var {\r\n    width,\r\n    height,\r\n    aspect\r\n  } = _ref;\r\n  var calculatedWidth = width;\r\n  var calculatedHeight = height;\r\n  if (calculatedWidth === undefined && calculatedHeight === undefined) {\r\n    calculatedWidth = '100%';\r\n    calculatedHeight = '100%';\r\n  } else if (calculatedWidth === undefined) {\r\n    calculatedWidth = aspect && aspect > 0 ? undefined : '100%';\r\n  } else if (calculatedHeight === undefined) {\r\n    calculatedHeight = aspect && aspect > 0 ? undefined : '100%';\r\n  }\r\n  return {\r\n    width: calculatedWidth,\r\n    height: calculatedHeight\r\n  };\r\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,OAAO,IAAIC,wBAAwB,GAAGA,CAACC,cAAc,EAAEC,eAAe,EAAEC,KAAK,KAAK;EAChF,IAAI;IACFC,KAAK,GAAG,MAAM;IACdC,MAAM,GAAG,MAAM;IACfC,MAAM;IACNC;EACF,CAAC,GAAGJ,KAAK;;EAET;AACF;AACA;AACA;EACE,IAAIK,eAAe,GAAGT,SAAS,CAACK,KAAK,CAAC,GAAGH,cAAc,GAAGQ,MAAM,CAACL,KAAK,CAAC;EACvE,IAAIM,gBAAgB,GAAGX,SAAS,CAACM,MAAM,CAAC,GAAGH,eAAe,GAAGO,MAAM,CAACJ,MAAM,CAAC;EAC3E,IAAIC,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAE;IACxB;IACA,IAAIE,eAAe,EAAE;MACnB;MACAE,gBAAgB,GAAGF,eAAe,GAAGF,MAAM;IAC7C,CAAC,MAAM,IAAII,gBAAgB,EAAE;MAC3B;MACAF,eAAe,GAAGE,gBAAgB,GAAGJ,MAAM;IAC7C;;IAEA;IACA,IAAIC,SAAS,IAAIG,gBAAgB,GAAGH,SAAS,EAAE;MAC7CG,gBAAgB,GAAGH,SAAS;IAC9B;EACF;EACA,OAAO;IACLC,eAAe;IACfE;EACF,CAAC;AACH,CAAC;AACD,IAAIC,YAAY,GAAG;EACjBP,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTO,QAAQ,EAAE;AACZ,CAAC;AACD,IAAIC,SAAS,GAAG;EACdT,KAAK,EAAE,CAAC;EACRS,SAAS,EAAE;AACb,CAAC;AACD,IAAIC,SAAS,GAAG;EACdT,MAAM,EAAE,CAAC;EACTS,SAAS,EAAE;AACb,CAAC;AACD,IAAIC,OAAO,GAAG,CAAC,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,gBAAgB,GAAGb,KAAK,IAAI;EACrC,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,KAAK;EACT,IAAIc,cAAc,GAAGlB,SAAS,CAACK,KAAK,CAAC;EACrC,IAAIc,eAAe,GAAGnB,SAAS,CAACM,MAAM,CAAC;EACvC,IAAIY,cAAc,IAAIC,eAAe,EAAE;IACrC,OAAOP,YAAY;EACrB;EACA,IAAIM,cAAc,EAAE;IAClB,OAAOJ,SAAS;EAClB;EACA,IAAIK,eAAe,EAAE;IACnB,OAAOJ,SAAS;EAClB;EACA,OAAOC,OAAO;AAChB,CAAC;AACD,OAAO,SAASI,wBAAwBA,CAACC,IAAI,EAAE;EAC7C,IAAI;IACFhB,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGc,IAAI;EACR,IAAIZ,eAAe,GAAGJ,KAAK;EAC3B,IAAIM,gBAAgB,GAAGL,MAAM;EAC7B,IAAIG,eAAe,KAAKa,SAAS,IAAIX,gBAAgB,KAAKW,SAAS,EAAE;IACnEb,eAAe,GAAG,MAAM;IACxBE,gBAAgB,GAAG,MAAM;EAC3B,CAAC,MAAM,IAAIF,eAAe,KAAKa,SAAS,EAAE;IACxCb,eAAe,GAAGF,MAAM,IAAIA,MAAM,GAAG,CAAC,GAAGe,SAAS,GAAG,MAAM;EAC7D,CAAC,MAAM,IAAIX,gBAAgB,KAAKW,SAAS,EAAE;IACzCX,gBAAgB,GAAGJ,MAAM,IAAIA,MAAM,GAAG,CAAC,GAAGe,SAAS,GAAG,MAAM;EAC9D;EACA,OAAO;IACLjB,KAAK,EAAEI,eAAe;IACtBH,MAAM,EAAEK;EACV,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}