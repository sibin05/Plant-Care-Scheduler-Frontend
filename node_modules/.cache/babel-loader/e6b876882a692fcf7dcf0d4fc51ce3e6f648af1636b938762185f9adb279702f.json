{"ast":null,"code":"import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { setChartSize, setMargin } from '../state/layoutSlice';\nimport { selectChartOffsetInternal, selectChartViewBox } from '../state/selectors/selectChartOffsetInternal';\nimport { selectChartHeight, selectChartWidth } from '../state/selectors/containerSelectors';\nimport { useIsPanorama } from './PanoramaContext';\nimport { selectBrushDimensions, selectBrushSettings } from '../state/selectors/brushSelectors';\nimport { useResponsiveContainerContext } from '../component/ResponsiveContainer';\nimport { isPositiveNumber } from '../util/isWellBehavedNumber';\nexport var useViewBox = () => {\n  var _useAppSelector;\n  var panorama = useIsPanorama();\n  var rootViewBox = useAppSelector(selectChartViewBox);\n  var brushDimensions = useAppSelector(selectBrushDimensions);\n  var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;\n  if (!panorama || !brushDimensions || !brushPadding) {\n    return rootViewBox;\n  }\n  return {\n    width: brushDimensions.width - brushPadding.left - brushPadding.right,\n    height: brushDimensions.height - brushPadding.top - brushPadding.bottom,\n    x: brushPadding.left,\n    y: brushPadding.top\n  };\n};\nvar manyComponentsThrowErrorsIfOffsetIsUndefined = {\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: 0,\n  height: 0,\n  brushBottom: 0\n};\n/**\r\n * For internal use only. If you want this information, `import { useOffset } from 'recharts'` instead.\r\n *\r\n * Returns the offset of the chart in pixels.\r\n *\r\n * @returns {ChartOffsetInternal} The offset of the chart in pixels, or a default value if not in a chart context.\r\n */\nexport var useOffsetInternal = () => {\n  var _useAppSelector2;\n  return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;\n};\n\n/**\r\n * Returns the width of the chart in pixels.\r\n *\r\n * If you are using chart with hardcoded `width` prop, then the width returned will be the same\r\n * as the `width` prop on the main chart element.\r\n *\r\n * If you are using a chart with a `ResponsiveContainer`, the width will be the size of the chart\r\n * as the ResponsiveContainer has decided it would be.\r\n *\r\n * If the chart has any axes or legend, the `width` will be the size of the chart\r\n * including the axes and legend. Meaning: adding axes and legend will not change the width.\r\n *\r\n * The dimensions do not scale, meaning as user zoom in and out, the width number will not change\r\n * as the chart gets visually larger or smaller.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {number | undefined} The width of the chart in pixels, or `undefined` if not in a chart context.\r\n */\nexport var useChartWidth = () => {\n  return useAppSelector(selectChartWidth);\n};\n\n/**\r\n * Returns the height of the chart in pixels.\r\n *\r\n * If you are using chart with hardcoded `height` props, then the height returned will be the same\r\n * as the `height` prop on the main chart element.\r\n *\r\n * If you are using a chart with a `ResponsiveContainer`, the height will be the size of the chart\r\n * as the ResponsiveContainer has decided it would be.\r\n *\r\n * If the chart has any axes or legend, the `height` will be the size of the chart\r\n * including the axes and legend. Meaning: adding axes and legend will not change the height.\r\n *\r\n * The dimensions do not scale, meaning as user zoom in and out, the height number will not change\r\n * as the chart gets visually larger or smaller.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {number | undefined} The height of the chart in pixels, or `undefined` if not in a chart context.\r\n */\nexport var useChartHeight = () => {\n  return useAppSelector(selectChartHeight);\n};\n\n/**\r\n * Margin is the empty space around the chart. Excludes axes and legend and brushes and the like.\r\n * This is declared by the user in the chart props.\r\n * If you are interested in the space occupied by axes, legend, or brushes,\r\n * use `useOffset` instead.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {Margin | undefined} The margin of the chart in pixels, or `undefined` if not in a chart context.\r\n */\nexport var useMargin = () => {\n  return useAppSelector(state => state.layout.margin);\n};\nexport var selectChartLayout = state => state.layout.layoutType;\nexport var useChartLayout = () => useAppSelector(selectChartLayout);\nexport var ReportChartSize = props => {\n  var dispatch = useAppDispatch();\n\n  /*\r\n   * Skip dispatching properties in panorama chart for two reasons:\r\n   * 1. The root chart should be deciding on these properties, and\r\n   * 2. Brush reads these properties from redux store, and so they must remain stable\r\n   *      to avoid circular dependency and infinite re-rendering.\r\n   */\n  var isPanorama = useIsPanorama();\n  var {\n    width: widthFromProps,\n    height: heightFromProps\n  } = props;\n  var responsiveContainerCalculations = useResponsiveContainerContext();\n  var width = widthFromProps;\n  var height = heightFromProps;\n  if (responsiveContainerCalculations) {\n    /*\r\n     * In case we receive width and height from ResponsiveContainer,\r\n     * we will always prefer those.\r\n     * Only in case ResponsiveContainer does not provide width or height,\r\n     * we will fall back to the explicitly provided width and height.\r\n     *\r\n     * This to me feels backwards - we should allow override by the more specific props on individual charts, right?\r\n     * But this is 3.x behaviour, so let's keep it for backwards compatibility.\r\n     *\r\n     * We can change this in 4.x if we want to.\r\n     */\n    width = responsiveContainerCalculations.width > 0 ? responsiveContainerCalculations.width : widthFromProps;\n    height = responsiveContainerCalculations.height > 0 ? responsiveContainerCalculations.height : heightFromProps;\n  }\n  useEffect(() => {\n    if (!isPanorama && isPositiveNumber(width) && isPositiveNumber(height)) {\n      dispatch(setChartSize({\n        width,\n        height\n      }));\n    }\n  }, [dispatch, isPanorama, width, height]);\n  return null;\n};\nexport var ReportChartMargin = _ref => {\n  var {\n    margin\n  } = _ref;\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setMargin(margin));\n  }, [dispatch, margin]);\n  return null;\n};","map":{"version":3,"names":["useEffect","useAppDispatch","useAppSelector","setChartSize","setMargin","selectChartOffsetInternal","selectChartViewBox","selectChartHeight","selectChartWidth","useIsPanorama","selectBrushDimensions","selectBrushSettings","useResponsiveContainerContext","isPositiveNumber","useViewBox","_useAppSelector","panorama","rootViewBox","brushDimensions","brushPadding","padding","width","left","right","height","top","bottom","x","y","manyComponentsThrowErrorsIfOffsetIsUndefined","brushBottom","useOffsetInternal","_useAppSelector2","useChartWidth","useChartHeight","useMargin","state","layout","margin","selectChartLayout","layoutType","useChartLayout","ReportChartSize","props","dispatch","isPanorama","widthFromProps","heightFromProps","responsiveContainerCalculations","ReportChartMargin","_ref"],"sources":["C:/Users/Dell/Desktop/project/frontend/Plant-Care-Scheduler-Frontend/node_modules/recharts/es6/context/chartLayoutContext.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\r\nimport { setChartSize, setMargin } from '../state/layoutSlice';\r\nimport { selectChartOffsetInternal, selectChartViewBox } from '../state/selectors/selectChartOffsetInternal';\r\nimport { selectChartHeight, selectChartWidth } from '../state/selectors/containerSelectors';\r\nimport { useIsPanorama } from './PanoramaContext';\r\nimport { selectBrushDimensions, selectBrushSettings } from '../state/selectors/brushSelectors';\r\nimport { useResponsiveContainerContext } from '../component/ResponsiveContainer';\r\nimport { isPositiveNumber } from '../util/isWellBehavedNumber';\r\nexport var useViewBox = () => {\r\n  var _useAppSelector;\r\n  var panorama = useIsPanorama();\r\n  var rootViewBox = useAppSelector(selectChartViewBox);\r\n  var brushDimensions = useAppSelector(selectBrushDimensions);\r\n  var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;\r\n  if (!panorama || !brushDimensions || !brushPadding) {\r\n    return rootViewBox;\r\n  }\r\n  return {\r\n    width: brushDimensions.width - brushPadding.left - brushPadding.right,\r\n    height: brushDimensions.height - brushPadding.top - brushPadding.bottom,\r\n    x: brushPadding.left,\r\n    y: brushPadding.top\r\n  };\r\n};\r\nvar manyComponentsThrowErrorsIfOffsetIsUndefined = {\r\n  top: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n  right: 0,\r\n  width: 0,\r\n  height: 0,\r\n  brushBottom: 0\r\n};\r\n/**\r\n * For internal use only. If you want this information, `import { useOffset } from 'recharts'` instead.\r\n *\r\n * Returns the offset of the chart in pixels.\r\n *\r\n * @returns {ChartOffsetInternal} The offset of the chart in pixels, or a default value if not in a chart context.\r\n */\r\nexport var useOffsetInternal = () => {\r\n  var _useAppSelector2;\r\n  return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;\r\n};\r\n\r\n/**\r\n * Returns the width of the chart in pixels.\r\n *\r\n * If you are using chart with hardcoded `width` prop, then the width returned will be the same\r\n * as the `width` prop on the main chart element.\r\n *\r\n * If you are using a chart with a `ResponsiveContainer`, the width will be the size of the chart\r\n * as the ResponsiveContainer has decided it would be.\r\n *\r\n * If the chart has any axes or legend, the `width` will be the size of the chart\r\n * including the axes and legend. Meaning: adding axes and legend will not change the width.\r\n *\r\n * The dimensions do not scale, meaning as user zoom in and out, the width number will not change\r\n * as the chart gets visually larger or smaller.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {number | undefined} The width of the chart in pixels, or `undefined` if not in a chart context.\r\n */\r\nexport var useChartWidth = () => {\r\n  return useAppSelector(selectChartWidth);\r\n};\r\n\r\n/**\r\n * Returns the height of the chart in pixels.\r\n *\r\n * If you are using chart with hardcoded `height` props, then the height returned will be the same\r\n * as the `height` prop on the main chart element.\r\n *\r\n * If you are using a chart with a `ResponsiveContainer`, the height will be the size of the chart\r\n * as the ResponsiveContainer has decided it would be.\r\n *\r\n * If the chart has any axes or legend, the `height` will be the size of the chart\r\n * including the axes and legend. Meaning: adding axes and legend will not change the height.\r\n *\r\n * The dimensions do not scale, meaning as user zoom in and out, the height number will not change\r\n * as the chart gets visually larger or smaller.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {number | undefined} The height of the chart in pixels, or `undefined` if not in a chart context.\r\n */\r\nexport var useChartHeight = () => {\r\n  return useAppSelector(selectChartHeight);\r\n};\r\n\r\n/**\r\n * Margin is the empty space around the chart. Excludes axes and legend and brushes and the like.\r\n * This is declared by the user in the chart props.\r\n * If you are interested in the space occupied by axes, legend, or brushes,\r\n * use `useOffset` instead.\r\n *\r\n * Returns `undefined` if used outside a chart context.\r\n *\r\n * @returns {Margin | undefined} The margin of the chart in pixels, or `undefined` if not in a chart context.\r\n */\r\nexport var useMargin = () => {\r\n  return useAppSelector(state => state.layout.margin);\r\n};\r\nexport var selectChartLayout = state => state.layout.layoutType;\r\nexport var useChartLayout = () => useAppSelector(selectChartLayout);\r\nexport var ReportChartSize = props => {\r\n  var dispatch = useAppDispatch();\r\n\r\n  /*\r\n   * Skip dispatching properties in panorama chart for two reasons:\r\n   * 1. The root chart should be deciding on these properties, and\r\n   * 2. Brush reads these properties from redux store, and so they must remain stable\r\n   *      to avoid circular dependency and infinite re-rendering.\r\n   */\r\n  var isPanorama = useIsPanorama();\r\n  var {\r\n    width: widthFromProps,\r\n    height: heightFromProps\r\n  } = props;\r\n  var responsiveContainerCalculations = useResponsiveContainerContext();\r\n  var width = widthFromProps;\r\n  var height = heightFromProps;\r\n  if (responsiveContainerCalculations) {\r\n    /*\r\n     * In case we receive width and height from ResponsiveContainer,\r\n     * we will always prefer those.\r\n     * Only in case ResponsiveContainer does not provide width or height,\r\n     * we will fall back to the explicitly provided width and height.\r\n     *\r\n     * This to me feels backwards - we should allow override by the more specific props on individual charts, right?\r\n     * But this is 3.x behaviour, so let's keep it for backwards compatibility.\r\n     *\r\n     * We can change this in 4.x if we want to.\r\n     */\r\n    width = responsiveContainerCalculations.width > 0 ? responsiveContainerCalculations.width : widthFromProps;\r\n    height = responsiveContainerCalculations.height > 0 ? responsiveContainerCalculations.height : heightFromProps;\r\n  }\r\n  useEffect(() => {\r\n    if (!isPanorama && isPositiveNumber(width) && isPositiveNumber(height)) {\r\n      dispatch(setChartSize({\r\n        width,\r\n        height\r\n      }));\r\n    }\r\n  }, [dispatch, isPanorama, width, height]);\r\n  return null;\r\n};\r\nexport var ReportChartMargin = _ref => {\r\n  var {\r\n    margin\r\n  } = _ref;\r\n  var dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(setMargin(margin));\r\n  }, [dispatch, margin]);\r\n  return null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}