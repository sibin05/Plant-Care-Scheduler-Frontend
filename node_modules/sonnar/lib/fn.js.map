{"version":3,"file":"fn.js","sourceRoot":"","sources":["../src/fn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,eAAe,CAAC;AACtC,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAuIzC,gFAAgF;AAEhF,MAAM,UAAU,EAAE,CAChB,YAAoB,EACpB,GAAG,IAAyC;IAE5C,MAAM,UAAU,GAAG,GAAG,YAAY,IAAI,IAAI;SACvC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,SAAS,CAAC;SAClC,GAAG,CACF,CAAC,GAAG,EAAE,EAAE,CACN,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAI,CAAC,CAAC,UAAU,CACxE;SACA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IAEjB,OAAO,YAAY,KAAK,IAAI;QAC1B,CAAC,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC;QACzB,CAAC,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC","sourcesContent":["import {NodeSet} from './node-set.js';\nimport {Primitive} from './primitive.js';\nimport type {Literal} from './primitive.js';\n\n/* Node-set functions *********************************************************/\n\n/** `number last()` */\nexport function fn(functionName: 'last'): Primitive;\n\n/** `number position()` */\nexport function fn(functionName: 'position'): Primitive;\n\n/** `number count(node-set)` */\nexport function fn(functionName: 'count', arg: NodeSet): Primitive;\n\n/** `node-set id(object)` */\nexport function fn(functionName: 'id', arg: Literal | Primitive): NodeSet;\n\n/** `string local-name(node-set?)` */\nexport function fn(functionName: 'local-name', arg?: NodeSet): Primitive;\n\n/** `string namespace-uri(node-set?)` */\nexport function fn(functionName: 'namespace-uri', arg?: NodeSet): Primitive;\n\n/** `string name(node-set?)` */\nexport function fn(functionName: 'name', arg?: NodeSet): Primitive;\n\n/* String functions ***********************************************************/\n\n/** `string string(object?)` */\nexport function fn(\n  functionName: 'string',\n  arg?: Literal | Primitive,\n): Primitive;\n\n/** `string concat(string, string, string*)` */\nexport function fn(\n  functionName: 'concat',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n  ...otherArgs: (Literal | Primitive)[]\n): Primitive;\n\n/** `boolean starts-with(string, string)` */\nexport function fn(\n  functionName: 'starts-with',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n): Primitive;\n\n/** `boolean contains(string, string)` */\nexport function fn(\n  functionName: 'contains',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n): Primitive;\n\n/** `string substring-before(string, string)` */\nexport function fn(\n  functionName: 'substring-before',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n): Primitive;\n\n/** `string substring-after(string, string)` */\nexport function fn(\n  functionName: 'substring-after',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n): Primitive;\n\n/** `string substring(string, number, number?)` */\nexport function fn(\n  functionName: 'substring',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n  arg3?: Literal | Primitive,\n): Primitive;\n\n/** `number string-length(string?)` */\nexport function fn(\n  functionName: 'string-length',\n  arg?: Literal | Primitive,\n): Primitive;\n\n/** `string normalize-space(string?)` */\nexport function fn(\n  functionName: 'normalize-space',\n  arg?: Literal | Primitive,\n): Primitive;\n\n/** `string translate(string, string, string)` */\nexport function fn(\n  functionName: 'translate',\n  arg1: Literal | Primitive,\n  arg2: Literal | Primitive,\n  arg3: Literal | Primitive,\n): Primitive;\n\n/* Boolean functions **********************************************************/\n\n/** `boolean boolean(object)` */\nexport function fn(\n  functionName: 'boolean',\n  arg: Literal | Primitive,\n): Primitive;\n\n/** `boolean not(boolean)` */\nexport function fn(functionName: 'not', arg: Literal | Primitive): Primitive;\n\n/** `boolean lang(string)` */\nexport function fn(functionName: 'lang', arg: Literal | Primitive): Primitive;\n\n/* Number functions ***********************************************************/\n\n/** `number number(object?)` */\nexport function fn(\n  functionName: 'number',\n  arg?: Literal | Primitive,\n): Primitive;\n\n/** `number sum(node-set)` */\nexport function fn(functionName: 'sum', arg: NodeSet): Primitive;\n\n/** `number floor(number)` */\nexport function fn(functionName: 'floor', arg: Literal | Primitive): Primitive;\n\n/** `number ceiling(number)` */\nexport function fn(\n  functionName: 'ceiling',\n  arg: Literal | Primitive,\n): Primitive;\n\n/** `number round(number)` */\nexport function fn(functionName: 'round', arg: Literal | Primitive): Primitive;\n\n/******************************************************************************/\n\nexport function fn(\n  functionName: string,\n  ...args: (Literal | Primitive | undefined)[]\n): Primitive {\n  const expression = `${functionName}(${args\n    .filter((arg) => arg !== undefined)\n    .map(\n      (arg) =>\n        (Primitive.isLiteral(arg) ? Primitive.literal(arg) : arg!).expression,\n    )\n    .join(`, `)})`;\n\n  return functionName === `id`\n    ? new NodeSet(expression)\n    : new Primitive(expression);\n}\n"]}