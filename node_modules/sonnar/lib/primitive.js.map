{"version":3,"file":"primitive.js","sourceRoot":"","sources":["../src/primitive.ts"],"names":[],"mappings":"AAGA,MAAM,OAAO,SAAS;IAsBC;IArBrB,MAAM,CAAC,SAAS,CAAC,KAAc;QAC7B,QAAQ,OAAO,KAAK,EAAE;YACpB,KAAK,SAAS,CAAC;YACf,KAAK,QAAQ,CAAC;YACd,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,KAAc;QAC3B,OAAO,IAAI,SAAS,CAClB,OAAO,KAAK,KAAK,SAAS;YACxB,CAAC,CAAC,KAAK;gBACL,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,SAAS;YACb,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAC1B,CAAC;IACJ,CAAC;IAED,YAAqB,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;IAAG,CAAC;IAE3C,GAAG,CAAC,OAA4B;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,EAAE,CAAC,OAA4B;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,EAAE,CAAC,QAA4B,EAAE,OAA4B;QAC3D,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,GAAG,CAAC,OAA4B;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ,CAAC,OAA4B;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ,CAAC,OAA4B;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,OAA4B;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,GAAG,CAAC,OAA4B;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAEQ,UAAU,GAAG,CAAC,QAAgB,EAAE,OAA4B,EAAE,EAAE;QACvE,OAAO,IAAI,SAAS,CAClB,IAAI,IAAI,CAAC,UAAU,IAAI,QAAQ,IAC7B,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;aAClE,UACL,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC;CACH","sourcesContent":["export type Literal = boolean | number | string;\nexport type ComparisonOperator = '=' | '!=' | '<' | '<=' | '>' | '>=';\n\nexport class Primitive {\n  static isLiteral(value: unknown): value is Literal {\n    switch (typeof value) {\n      case `boolean`:\n      case `number`:\n      case `string`:\n        return true;\n    }\n\n    return false;\n  }\n\n  static literal(value: Literal): Primitive {\n    return new Primitive(\n      typeof value === `boolean`\n        ? value\n          ? `true()`\n          : `false()`\n        : JSON.stringify(value),\n    );\n  }\n\n  constructor(readonly expression: string) {}\n\n  and(operand: Literal | Primitive): Primitive {\n    return this.#operation(`and`, operand);\n  }\n\n  or(operand: Literal | Primitive): Primitive {\n    return this.#operation(`or`, operand);\n  }\n\n  is(operator: ComparisonOperator, operand: Literal | Primitive): Primitive {\n    return this.#operation(operator, operand);\n  }\n\n  add(operand: Literal | Primitive): Primitive {\n    return this.#operation(`+`, operand);\n  }\n\n  subtract(operand: Literal | Primitive): Primitive {\n    return this.#operation(`-`, operand);\n  }\n\n  multiply(operand: Literal | Primitive): Primitive {\n    return this.#operation(`*`, operand);\n  }\n\n  divide(operand: Literal | Primitive): Primitive {\n    return this.#operation(`div`, operand);\n  }\n\n  mod(operand: Literal | Primitive): Primitive {\n    return this.#operation(`mod`, operand);\n  }\n\n  readonly #operation = (operator: string, operand: Literal | Primitive) => {\n    return new Primitive(\n      `(${this.expression} ${operator} ${\n        (Primitive.isLiteral(operand) ? Primitive.literal(operand) : operand)\n          .expression\n      })`,\n    );\n  };\n}\n"]}