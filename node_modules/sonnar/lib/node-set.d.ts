import { Primitive } from './primitive.js';
import type { Literal } from './primitive.js';
export type AxisName = 'ancestor-or-self' | 'ancestor' | 'child' | 'descendant-or-self' | 'descendant' | 'following-sibling' | 'following' | 'parent' | 'preceding-sibling' | 'preceding' | 'self';
export declare class NodeSet extends Primitive {
    /** Shortcut for `NodeSet.node('descendant-or-self')` */
    static any(): NodeSet;
    static attribute(attributeName: string): NodeSet;
    static comment(axisName?: AxisName): NodeSet;
    static element(elementName: string, axisName?: AxisName): NodeSet;
    static namespace(namespaceName: string): NodeSet;
    static node(axisName?: AxisName): NodeSet;
    /** Shortcut for `NodeSet.node('parent')` */
    static parent(): NodeSet;
    static processingInstruction(axisName?: AxisName, targetName?: string): NodeSet;
    static root(): NodeSet;
    /** Shortcut for `NodeSet.node('self')` */
    static self(): NodeSet;
    static text(axisName?: AxisName): NodeSet;
    filter(predicate: Literal | Primitive): NodeSet;
    path(operand: NodeSet): NodeSet;
    union(operand: NodeSet): NodeSet;
}
