import { NodeSet } from './node-set.js';
import { Primitive } from './primitive.js';
import type { Literal } from './primitive.js';
/** `number last()` */
export declare function fn(functionName: 'last'): Primitive;
/** `number position()` */
export declare function fn(functionName: 'position'): Primitive;
/** `number count(node-set)` */
export declare function fn(functionName: 'count', arg: NodeSet): Primitive;
/** `node-set id(object)` */
export declare function fn(functionName: 'id', arg: Literal | Primitive): NodeSet;
/** `string local-name(node-set?)` */
export declare function fn(functionName: 'local-name', arg?: NodeSet): Primitive;
/** `string namespace-uri(node-set?)` */
export declare function fn(functionName: 'namespace-uri', arg?: NodeSet): Primitive;
/** `string name(node-set?)` */
export declare function fn(functionName: 'name', arg?: NodeSet): Primitive;
/** `string string(object?)` */
export declare function fn(functionName: 'string', arg?: Literal | Primitive): Primitive;
/** `string concat(string, string, string*)` */
export declare function fn(functionName: 'concat', arg1: Literal | Primitive, arg2: Literal | Primitive, ...otherArgs: (Literal | Primitive)[]): Primitive;
/** `boolean starts-with(string, string)` */
export declare function fn(functionName: 'starts-with', arg1: Literal | Primitive, arg2: Literal | Primitive): Primitive;
/** `boolean contains(string, string)` */
export declare function fn(functionName: 'contains', arg1: Literal | Primitive, arg2: Literal | Primitive): Primitive;
/** `string substring-before(string, string)` */
export declare function fn(functionName: 'substring-before', arg1: Literal | Primitive, arg2: Literal | Primitive): Primitive;
/** `string substring-after(string, string)` */
export declare function fn(functionName: 'substring-after', arg1: Literal | Primitive, arg2: Literal | Primitive): Primitive;
/** `string substring(string, number, number?)` */
export declare function fn(functionName: 'substring', arg1: Literal | Primitive, arg2: Literal | Primitive, arg3?: Literal | Primitive): Primitive;
/** `number string-length(string?)` */
export declare function fn(functionName: 'string-length', arg?: Literal | Primitive): Primitive;
/** `string normalize-space(string?)` */
export declare function fn(functionName: 'normalize-space', arg?: Literal | Primitive): Primitive;
/** `string translate(string, string, string)` */
export declare function fn(functionName: 'translate', arg1: Literal | Primitive, arg2: Literal | Primitive, arg3: Literal | Primitive): Primitive;
/** `boolean boolean(object)` */
export declare function fn(functionName: 'boolean', arg: Literal | Primitive): Primitive;
/** `boolean not(boolean)` */
export declare function fn(functionName: 'not', arg: Literal | Primitive): Primitive;
/** `boolean lang(string)` */
export declare function fn(functionName: 'lang', arg: Literal | Primitive): Primitive;
/** `number number(object?)` */
export declare function fn(functionName: 'number', arg?: Literal | Primitive): Primitive;
/** `number sum(node-set)` */
export declare function fn(functionName: 'sum', arg: NodeSet): Primitive;
/** `number floor(number)` */
export declare function fn(functionName: 'floor', arg: Literal | Primitive): Primitive;
/** `number ceiling(number)` */
export declare function fn(functionName: 'ceiling', arg: Literal | Primitive): Primitive;
/** `number round(number)` */
export declare function fn(functionName: 'round', arg: Literal | Primitive): Primitive;
