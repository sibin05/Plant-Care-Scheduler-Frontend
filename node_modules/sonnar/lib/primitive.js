export class Primitive {
    expression;
    static isLiteral(value) {
        switch (typeof value) {
            case `boolean`:
            case `number`:
            case `string`:
                return true;
        }
        return false;
    }
    static literal(value) {
        return new Primitive(typeof value === `boolean`
            ? value
                ? `true()`
                : `false()`
            : JSON.stringify(value));
    }
    constructor(expression) {
        this.expression = expression;
    }
    and(operand) {
        return this.#operation(`and`, operand);
    }
    or(operand) {
        return this.#operation(`or`, operand);
    }
    is(operator, operand) {
        return this.#operation(operator, operand);
    }
    add(operand) {
        return this.#operation(`+`, operand);
    }
    subtract(operand) {
        return this.#operation(`-`, operand);
    }
    multiply(operand) {
        return this.#operation(`*`, operand);
    }
    divide(operand) {
        return this.#operation(`div`, operand);
    }
    mod(operand) {
        return this.#operation(`mod`, operand);
    }
    #operation = (operator, operand) => {
        return new Primitive(`(${this.expression} ${operator} ${(Primitive.isLiteral(operand) ? Primitive.literal(operand) : operand)
            .expression})`);
    };
}
//# sourceMappingURL=primitive.js.map