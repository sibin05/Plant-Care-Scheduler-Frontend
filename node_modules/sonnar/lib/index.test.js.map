{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {expect, test} from '@jest/globals';\nimport {fn} from './fn.js';\nimport {NodeSet} from './node-set.js';\nimport {Primitive} from './primitive.js';\n\ntest(`README: Find all HackerNews posts which have more than 50 comments`, () => {\n  const {expression} = NodeSet.any()\n    .filter(NodeSet.attribute(`.athing`))\n    .filter(\n      NodeSet.element(`tr`, `following-sibling`)\n        .filter(fn(`position`).is(`=`, 1)) // less verbose alternative: .filter(1)\n        .path(NodeSet.element(`td`))\n        .filter(2)\n        .path(NodeSet.element(`a`))\n        .filter(fn(`last`))\n        .filter(fn(`substring-before`, NodeSet.text(), `\\u00A0`).is(`>`, 50)),\n    );\n\n  expect(expression).toBe(\n    `descendant-or-self::node()[attribute::class[contains(concat(\" \", normalize-space(self::node()), \" \"), \" athing \")]][following-sibling::tr[(position() = 1)] / child::td[2] / child::a[last()][(substring-before(child::text(), \"\\u00A0\") > 50)]]`,\n  );\n});\n\ntest(`README: Select a set of nodes`, () => {\n  expect(\n    [\n      // selects the para element children of the context node\n      NodeSet.element(`para`),\n\n      // selects all element children of the context node\n      NodeSet.element(`*`),\n\n      // selects all text node children of the context node\n      NodeSet.text(),\n\n      // selects all the children of the context node, whatever their node type\n      NodeSet.node(),\n\n      // selects the name attribute of the context node\n      NodeSet.attribute(`name`),\n\n      // selects all the attributes of the context node\n      NodeSet.attribute(`*`),\n\n      // selects the para element descendants of the context node\n      NodeSet.element(`para`, `descendant`),\n\n      // selects all div ancestors of the context node\n      NodeSet.element(`div`, `ancestor`),\n\n      // selects the div ancestors of the context node and, if the context node is a div element, the context node as well\n      NodeSet.element(`div`, `ancestor-or-self`),\n\n      // selects the para element descendants of the context node and, if the context node is a para element, the context node as well\n      NodeSet.element(`para`, `descendant-or-self`),\n\n      // selects the context node if it is a para element, and otherwise selects nothing\n      NodeSet.element(`para`, `self`),\n\n      // selects the para element descendants of the chapter element children of the context node\n      NodeSet.element(`chapter`).path(NodeSet.element(`para`, `descendant`)),\n\n      // selects all para grandchildren of the context node\n      NodeSet.element(`*`).path(NodeSet.element(`para`)),\n\n      // selects the document root (which is always the parent of the document element)\n      NodeSet.root(),\n\n      // selects all the para elements in the same document as the context node\n      NodeSet.root().path(NodeSet.element(`para`, `descendant`)),\n\n      // selects all the item elements that have an olist parent and that are in the same document as the context node\n      NodeSet.root()\n        .path(NodeSet.element(`olist`, `descendant`))\n        .path(NodeSet.element(`item`)),\n\n      // selects the first para child of the context node\n      NodeSet.element(`para`).filter(fn(`position`).is(`=`, 1)),\n\n      // selects the last para child of the context node\n      NodeSet.element(`para`).filter(fn(`position`).is(`=`, fn(`last`))),\n\n      // selects the last but one para child of the context node\n      NodeSet.element(`para`).filter(\n        fn(`position`).is(`=`, fn(`last`).subtract(1)),\n      ),\n\n      // selects all the para children of the context node other than the first para child of the context node\n      NodeSet.element(`para`).filter(fn(`position`).is(`>`, 1)),\n\n      // selects the next chapter sibling of the context node\n      NodeSet.element(`chapter`, `following-sibling`).filter(\n        fn(`position`).is(`=`, 1),\n      ),\n\n      // selects the previous chapter sibling of the context node\n      NodeSet.element(`chapter`, `preceding-sibling`).filter(\n        fn(`position`).is(`=`, 1),\n      ),\n\n      // selects the forty-second figure element in the document\n      NodeSet.root()\n        .path(NodeSet.element(`figure`, `descendant`))\n        .filter(fn(`position`).is(`=`, 42)),\n\n      // selects the second section of the fifth chapter of the doc document element\n      NodeSet.root()\n        .path(NodeSet.element(`doc`))\n        .path(NodeSet.element(`chapter`))\n        .filter(fn(`position`).is(`=`, 5))\n        .path(NodeSet.element(`section`))\n        .filter(fn(`position`).is(`=`, 2)),\n\n      // selects all para children of the context node that have a type attribute with value warning\n      NodeSet.element(`para`).filter(\n        NodeSet.attribute(`type`).is(`=`, `warning`),\n      ),\n\n      // selects the fifth para child of the context node that has a type attribute with value warning\n      NodeSet.element(`para`)\n        .filter(NodeSet.attribute(`type`).is(`=`, `warning`))\n        .filter(fn(`position`).is(`=`, 5)),\n\n      // selects the fifth para child of the context node if that child has a type attribute with value warning\n      NodeSet.element(`para`)\n        .filter(fn(`position`).is(`=`, 5))\n        .filter(NodeSet.attribute(`type`).is(`=`, `warning`)),\n\n      // selects the chapter children of the context node that have one or more title children with string-value equal to Introduction\n      NodeSet.element(`chapter`).filter(\n        NodeSet.element(`title`).is(`=`, `Introduction`),\n      ),\n\n      // selects the chapter children of the context node that have one or more title children\n      NodeSet.element(`chapter`).filter(NodeSet.element(`title`)),\n\n      // selects the chapter and appendix children of the context node\n      NodeSet.element(`*`).filter(\n        NodeSet.element(`chapter`, `self`).or(\n          NodeSet.element(`appendix`, `self`),\n        ),\n      ),\n\n      // selects the last chapter or appendix child of the context node\n      NodeSet.element(`*`)\n        .filter(\n          NodeSet.element(`chapter`, `self`).or(\n            NodeSet.element(`appendix`, `self`),\n          ),\n        )\n        .filter(fn(`position`).is(`=`, fn(`last`))),\n    ].map(({expression}) => expression),\n  ).toEqual([\n    `child::para`,\n    `child::*`,\n    `child::text()`,\n    `child::node()`,\n    `attribute::name`,\n    `attribute::*`,\n    `descendant::para`,\n    `ancestor::div`,\n    `ancestor-or-self::div`,\n    `descendant-or-self::para`,\n    `self::para`,\n    `child::chapter / descendant::para`,\n    `child::* / child::para`,\n    `/`,\n    `/ descendant::para`,\n    `/ descendant::olist / child::item`,\n    `child::para[(position() = 1)]`,\n    `child::para[(position() = last())]`,\n    `child::para[(position() = (last() - 1))]`,\n    `child::para[(position() > 1)]`,\n    `following-sibling::chapter[(position() = 1)]`,\n    `preceding-sibling::chapter[(position() = 1)]`,\n    `/ descendant::figure[(position() = 42)]`,\n    `/ child::doc / child::chapter[(position() = 5)] / child::section[(position() = 2)]`,\n    `child::para[(attribute::type = \"warning\")]`,\n    `child::para[(attribute::type = \"warning\")][(position() = 5)]`,\n    `child::para[(position() = 5)][(attribute::type = \"warning\")]`,\n    `child::chapter[(child::title = \"Introduction\")]`,\n    `child::chapter[child::title]`,\n    `child::*[(self::chapter or self::appendix)]`,\n    `child::*[(self::chapter or self::appendix)][(position() = last())]`,\n  ]);\n});\n\ntest(`README: Group using parentheses`, () => {\n  expect(\n    [\n      Primitive.literal(3).add(3).multiply(7).is(`=`, 42),\n      Primitive.literal(7).multiply(3).add(3).is(`!=`, 42),\n      Primitive.literal(7).multiply(Primitive.literal(3).add(3)).is(`=`, 42),\n    ].map(({expression}) => expression),\n  ).toEqual([\n    `(((3 + 3) * 7) = 42)`,\n    `(((7 * 3) + 3) != 42)`,\n    `((7 * (3 + 3)) = 42)`,\n  ]);\n});\n"]}