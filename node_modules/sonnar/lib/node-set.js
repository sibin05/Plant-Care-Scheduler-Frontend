import { fn } from './fn.js';
import { Primitive } from './primitive.js';
export class NodeSet extends Primitive {
    /** Shortcut for `NodeSet.node('descendant-or-self')` */
    static any() {
        return NodeSet.node(`descendant-or-self`);
    }
    static attribute(attributeName) {
        if (attributeName.startsWith(`.`)) {
            return NodeSet.attribute(`class`).filter(fn(`contains`, fn(`concat`, ` `, fn(`normalize-space`, NodeSet.self()), ` `), ` ${attributeName.slice(1)} `));
        }
        if (attributeName.startsWith(`#`)) {
            return NodeSet.attribute(`id`).filter(NodeSet.self().is(`=`, attributeName.slice(1)));
        }
        return new NodeSet(`attribute::${attributeName}`);
    }
    static comment(axisName = `child`) {
        return new NodeSet(`${axisName}::comment()`);
    }
    static element(elementName, axisName = `child`) {
        return new NodeSet(`${axisName}::${elementName}`);
    }
    static namespace(namespaceName) {
        return new NodeSet(`namespace::${namespaceName}`);
    }
    static node(axisName = `child`) {
        return new NodeSet(`${axisName}::node()`);
    }
    /** Shortcut for `NodeSet.node('parent')` */
    static parent() {
        return NodeSet.node(`parent`);
    }
    static processingInstruction(axisName = `child`, targetName = ``) {
        return new NodeSet(`${axisName}::processing-instruction(${targetName})`);
    }
    static root() {
        return new NodeSet(`/`);
    }
    /** Shortcut for `NodeSet.node('self')` */
    static self() {
        return NodeSet.node(`self`);
    }
    static text(axisName = `child`) {
        return new NodeSet(`${axisName}::text()`);
    }
    filter(predicate) {
        return new NodeSet(`${this.expression}[${(Primitive.isLiteral(predicate)
            ? Primitive.literal(predicate)
            : predicate).expression}]`);
    }
    path(operand) {
        return new NodeSet(`${this.expression === `/` ? `/` : `${this.expression} /`} ${operand.expression}`);
    }
    union(operand) {
        return new NodeSet(`${this.expression} | ${operand.expression}`);
    }
}
//# sourceMappingURL=node-set.js.map