{"version":3,"file":"fn.test.js","sourceRoot":"","sources":["../src/fn.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {expect, test} from '@jest/globals';\nimport {fn} from './fn.js';\nimport {NodeSet} from './node-set.js';\nimport {Primitive} from './primitive.js';\n\ntest(`fn()`, () => {\n  const last = fn(`last`);\n\n  expect(last).toBeInstanceOf(Primitive);\n  expect(last).not.toBeInstanceOf(NodeSet);\n  expect(last.expression).toBe(`last()`);\n\n  const position = fn(`position`);\n\n  expect(position).toBeInstanceOf(Primitive);\n  expect(position).not.toBeInstanceOf(NodeSet);\n  expect(position.expression).toBe(`position()`);\n\n  const count = fn(`count`, NodeSet.root());\n\n  expect(count).toBeInstanceOf(Primitive);\n  expect(count).not.toBeInstanceOf(NodeSet);\n  expect(count.expression).toBe(`count(/)`);\n\n  const id = fn(`id`, `0`);\n\n  expect(id).toBeInstanceOf(NodeSet);\n  expect(id.expression).toBe(`id(\"0\")`);\n\n  const localName1 = fn(`local-name`);\n  const localName2 = fn(`local-name`, NodeSet.root());\n\n  expect(localName1).toBeInstanceOf(Primitive);\n  expect(localName1).not.toBeInstanceOf(NodeSet);\n  expect(localName1.expression).toBe(`local-name()`);\n  expect(localName2.expression).toBe(`local-name(/)`);\n\n  const namespaceURI1 = fn(`namespace-uri`);\n  const namespaceURI2 = fn(`namespace-uri`, NodeSet.root());\n\n  expect(namespaceURI1).toBeInstanceOf(Primitive);\n  expect(namespaceURI1).not.toBeInstanceOf(NodeSet);\n  expect(namespaceURI1.expression).toBe(`namespace-uri()`);\n  expect(namespaceURI2.expression).toBe(`namespace-uri(/)`);\n\n  const name1 = fn(`name`);\n  const name2 = fn(`name`, NodeSet.root());\n\n  expect(name1).toBeInstanceOf(Primitive);\n  expect(name1).not.toBeInstanceOf(NodeSet);\n  expect(name1.expression).toBe(`name()`);\n  expect(name2.expression).toBe(`name(/)`);\n\n  const string1 = fn(`string`);\n  const string2 = fn(`string`, `0`);\n\n  expect(string1).toBeInstanceOf(Primitive);\n  expect(string1).not.toBeInstanceOf(NodeSet);\n  expect(string1.expression).toBe(`string()`);\n  expect(string2.expression).toBe(`string(\"0\")`);\n\n  const concat1 = fn(`concat`, `0`, `1`);\n  const concat2 = fn(`concat`, `0`, `1`, `2`);\n\n  expect(concat1).toBeInstanceOf(Primitive);\n  expect(concat1).not.toBeInstanceOf(NodeSet);\n  expect(concat1.expression).toBe(`concat(\"0\", \"1\")`);\n  expect(concat2.expression).toBe(`concat(\"0\", \"1\", \"2\")`);\n\n  const startsWith = fn(`starts-with`, `0`, `1`);\n\n  expect(startsWith).toBeInstanceOf(Primitive);\n  expect(startsWith).not.toBeInstanceOf(NodeSet);\n  expect(startsWith.expression).toBe(`starts-with(\"0\", \"1\")`);\n\n  const contains = fn(`contains`, `0`, `1`);\n\n  expect(contains).toBeInstanceOf(Primitive);\n  expect(contains).not.toBeInstanceOf(NodeSet);\n  expect(contains.expression).toBe(`contains(\"0\", \"1\")`);\n\n  const substringBefore = fn(`substring-before`, `0`, `1`);\n\n  expect(substringBefore).toBeInstanceOf(Primitive);\n  expect(substringBefore).not.toBeInstanceOf(NodeSet);\n  expect(substringBefore.expression).toBe(`substring-before(\"0\", \"1\")`);\n\n  const substringAfter = fn(`substring-after`, `0`, `1`);\n\n  expect(substringAfter).toBeInstanceOf(Primitive);\n  expect(substringAfter).not.toBeInstanceOf(NodeSet);\n  expect(substringAfter.expression).toBe(`substring-after(\"0\", \"1\")`);\n\n  const substring1 = fn(`substring`, `0`, `1`);\n  const substring2 = fn(`substring`, `0`, `1`, `2`);\n\n  expect(substring1).toBeInstanceOf(Primitive);\n  expect(substring1).not.toBeInstanceOf(NodeSet);\n  expect(substring1.expression).toBe(`substring(\"0\", \"1\")`);\n  expect(substring2.expression).toBe(`substring(\"0\", \"1\", \"2\")`);\n\n  const stringLength1 = fn(`string-length`);\n  const stringLength2 = fn(`string-length`, `0`);\n\n  expect(stringLength1).toBeInstanceOf(Primitive);\n  expect(stringLength1).not.toBeInstanceOf(NodeSet);\n  expect(stringLength1.expression).toBe(`string-length()`);\n  expect(stringLength2.expression).toBe(`string-length(\"0\")`);\n\n  const normalizeSpace1 = fn(`normalize-space`);\n  const normalizeSpace2 = fn(`normalize-space`, `0`);\n\n  expect(normalizeSpace1).toBeInstanceOf(Primitive);\n  expect(normalizeSpace1).not.toBeInstanceOf(NodeSet);\n  expect(normalizeSpace1.expression).toBe(`normalize-space()`);\n  expect(normalizeSpace2.expression).toBe(`normalize-space(\"0\")`);\n\n  const translate = fn(`translate`, `0`, `1`, `2`);\n\n  expect(translate).toBeInstanceOf(Primitive);\n  expect(translate).not.toBeInstanceOf(NodeSet);\n  expect(translate.expression).toBe(`translate(\"0\", \"1\", \"2\")`);\n\n  const boolean = fn(`boolean`, `0`);\n\n  expect(boolean).toBeInstanceOf(Primitive);\n  expect(boolean).not.toBeInstanceOf(NodeSet);\n  expect(boolean.expression).toBe(`boolean(\"0\")`);\n\n  const not = fn(`not`, `0`);\n\n  expect(not).toBeInstanceOf(Primitive);\n  expect(not).not.toBeInstanceOf(NodeSet);\n  expect(not.expression).toBe(`not(\"0\")`);\n\n  const lang = fn(`lang`, `0`);\n\n  expect(lang).toBeInstanceOf(Primitive);\n  expect(lang).not.toBeInstanceOf(NodeSet);\n  expect(lang.expression).toBe(`lang(\"0\")`);\n\n  const number1 = fn(`number`);\n  const number2 = fn(`number`, `0`);\n\n  expect(number1).toBeInstanceOf(Primitive);\n  expect(number1).not.toBeInstanceOf(NodeSet);\n  expect(number1.expression).toBe(`number()`);\n  expect(number2.expression).toBe(`number(\"0\")`);\n\n  const sum = fn(`sum`, NodeSet.root());\n\n  expect(sum).toBeInstanceOf(Primitive);\n  expect(sum).not.toBeInstanceOf(NodeSet);\n  expect(sum.expression).toBe(`sum(/)`);\n\n  const floor = fn(`floor`, `0`);\n\n  expect(floor).toBeInstanceOf(Primitive);\n  expect(floor).not.toBeInstanceOf(NodeSet);\n  expect(floor.expression).toBe(`floor(\"0\")`);\n\n  const ceiling = fn(`ceiling`, `0`);\n\n  expect(ceiling).toBeInstanceOf(Primitive);\n  expect(ceiling).not.toBeInstanceOf(NodeSet);\n  expect(ceiling.expression).toBe(`ceiling(\"0\")`);\n\n  const round = fn(`round`, `0`);\n\n  expect(round).toBeInstanceOf(Primitive);\n  expect(round).not.toBeInstanceOf(NodeSet);\n  expect(round.expression).toBe(`round(\"0\")`);\n});\n"]}