{"version":3,"file":"primitive.test.js","sourceRoot":"","sources":["../src/primitive.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {describe, expect, test} from '@jest/globals';\nimport {Primitive} from './primitive.js';\n\ndescribe(`Primitive`, () => {\n  test(`static isLiteral()`, () => {\n    expect(Primitive.isLiteral(false)).toBe(true);\n    expect(Primitive.isLiteral(0)).toBe(true);\n    expect(Primitive.isLiteral(``)).toBe(true);\n    expect(Primitive.isLiteral(Primitive.literal(false))).toBe(false);\n  });\n\n  test(`static literal()`, () => {\n    expect(Primitive.literal(false).expression).toBe(`false()`);\n    expect(Primitive.literal(true).expression).toBe(`true()`);\n    expect(Primitive.literal(0).expression).toBe(`0`);\n    expect(Primitive.literal(``).expression).toBe(`\"\"`);\n    expect(Primitive.literal(`\"foo\"`).expression).toBe(`\"\\\\\"foo\\\\\"\"`);\n  });\n\n  test(`and()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .and(Primitive.literal(`1`).and(`2`))\n      .and(`3`);\n\n    expect(expression).toBe(`((\"0\" and (\"1\" and \"2\")) and \"3\")`);\n  });\n\n  test(`or()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .or(Primitive.literal(`1`).or(`2`))\n      .or(`3`);\n\n    expect(expression).toBe(`((\"0\" or (\"1\" or \"2\")) or \"3\")`);\n  });\n\n  test(`is()`, () => {\n    expect(\n      [\n        Primitive.literal(`0`).is(`=`, `1`),\n        Primitive.literal(`0`).is(`=`, `1`).is(`!=`, `2`),\n        Primitive.literal(`0`).is(`=`, `1`).is(`<`, `2`),\n        Primitive.literal(`0`).is(`=`, `1`).is(`<=`, `2`),\n        Primitive.literal(`0`).is(`=`, `1`).is(`>`, `2`),\n        Primitive.literal(`0`).is(`=`, `1`).is(`>=`, `2`),\n      ].map(({expression}) => expression),\n    ).toEqual([\n      `(\"0\" = \"1\")`,\n      `((\"0\" = \"1\") != \"2\")`,\n      `((\"0\" = \"1\") < \"2\")`,\n      `((\"0\" = \"1\") <= \"2\")`,\n      `((\"0\" = \"1\") > \"2\")`,\n      `((\"0\" = \"1\") >= \"2\")`,\n    ]);\n  });\n\n  test(`add()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .add(Primitive.literal(`1`).add(`2`))\n      .add(`3`);\n\n    expect(expression).toBe(`((\"0\" + (\"1\" + \"2\")) + \"3\")`);\n  });\n\n  test(`subtract()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .subtract(Primitive.literal(`1`).subtract(`2`))\n      .subtract(`3`);\n\n    expect(expression).toBe(`((\"0\" - (\"1\" - \"2\")) - \"3\")`);\n  });\n\n  test(`multiply()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .multiply(Primitive.literal(`1`).multiply(`2`))\n      .multiply(`3`);\n\n    expect(expression).toBe(`((\"0\" * (\"1\" * \"2\")) * \"3\")`);\n  });\n\n  test(`divide()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .divide(Primitive.literal(`1`).divide(`2`))\n      .divide(`3`);\n\n    expect(expression).toBe(`((\"0\" div (\"1\" div \"2\")) div \"3\")`);\n  });\n\n  test(`mod()`, () => {\n    const {expression} = Primitive.literal(`0`)\n      .mod(Primitive.literal(`1`).mod(`2`))\n      .mod(`3`);\n\n    expect(expression).toBe(`((\"0\" mod (\"1\" mod \"2\")) mod \"3\")`);\n  });\n});\n"]}