{"version":3,"file":"node-set.js","sourceRoot":"","sources":["../src/node-set.ts"],"names":[],"mappings":"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","sourcesContent":["import {fn} from './fn.js';\nimport {Primitive} from './primitive.js';\nimport type {Literal} from './primitive.js';\n\nexport type AxisName =\n  | 'ancestor-or-self'\n  | 'ancestor'\n  | 'child'\n  | 'descendant-or-self'\n  | 'descendant'\n  | 'following-sibling'\n  | 'following'\n  | 'parent'\n  | 'preceding-sibling'\n  | 'preceding'\n  | 'self';\n\nexport class NodeSet extends Primitive {\n  /** Shortcut for `NodeSet.node('descendant-or-self')` */\n  static any(): NodeSet {\n    return NodeSet.node(`descendant-or-self`);\n  }\n\n  static attribute(attributeName: string): NodeSet {\n    if (attributeName.startsWith(`.`)) {\n      return NodeSet.attribute(`class`).filter(\n        fn(\n          `contains`,\n          fn(`concat`, ` `, fn(`normalize-space`, NodeSet.self()), ` `),\n          ` ${attributeName.slice(1)} `,\n        ),\n      );\n    }\n\n    if (attributeName.startsWith(`#`)) {\n      return NodeSet.attribute(`id`).filter(\n        NodeSet.self().is(`=`, attributeName.slice(1)),\n      );\n    }\n\n    return new NodeSet(`attribute::${attributeName}`);\n  }\n\n  static comment(axisName: AxisName = `child`): NodeSet {\n    return new NodeSet(`${axisName}::comment()`);\n  }\n\n  static element(elementName: string, axisName: AxisName = `child`): NodeSet {\n    return new NodeSet(`${axisName}::${elementName}`);\n  }\n\n  static namespace(namespaceName: string): NodeSet {\n    return new NodeSet(`namespace::${namespaceName}`);\n  }\n\n  static node(axisName: AxisName = `child`): NodeSet {\n    return new NodeSet(`${axisName}::node()`);\n  }\n\n  /** Shortcut for `NodeSet.node('parent')` */\n  static parent(): NodeSet {\n    return NodeSet.node(`parent`);\n  }\n\n  static processingInstruction(\n    axisName: AxisName = `child`,\n    targetName: string = ``,\n  ): NodeSet {\n    return new NodeSet(`${axisName}::processing-instruction(${targetName})`);\n  }\n\n  static root(): NodeSet {\n    return new NodeSet(`/`);\n  }\n\n  /** Shortcut for `NodeSet.node('self')` */\n  static self(): NodeSet {\n    return NodeSet.node(`self`);\n  }\n\n  static text(axisName: AxisName = `child`): NodeSet {\n    return new NodeSet(`${axisName}::text()`);\n  }\n\n  filter(predicate: Literal | Primitive): NodeSet {\n    return new NodeSet(\n      `${this.expression}[${\n        (Primitive.isLiteral(predicate)\n          ? Primitive.literal(predicate)\n          : predicate\n        ).expression\n      }]`,\n    );\n  }\n\n  path(operand: NodeSet): NodeSet {\n    return new NodeSet(\n      `${this.expression === `/` ? `/` : `${this.expression} /`} ${\n        operand.expression\n      }`,\n    );\n  }\n\n  union(operand: NodeSet): NodeSet {\n    return new NodeSet(`${this.expression} | ${operand.expression}`);\n  }\n}\n"]}